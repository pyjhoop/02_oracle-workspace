--저장
--실습문제--

--외래키를 사용할때 drop 테이블 만드는 법
-- 가장 최근에 만든 테입르을 젤 위에 써야한다.
DROP TABLE TB_RENT;
DROP TABLE TB_MEMBER;
DROP TABLE TB_BOOK;
DROP TABLE TB_PUBLISHER;

-- 이유는 외래키로 참조하고있기에 항상 자식부터 드랍해야한다.


--도서관리 프로그램을 만들기 위한 테이블을 만들기

--이때, 제약조건에 이름을 부여할 것

-- 각 컬럼에 주석달기



--1. 출판사들에 대한 데이터를 담기 위한 출판사 테이블(TB_PUBLISHER)

--컬럼: PUB_NO(출판사번호) --기본키(PUBLISHER_PK)

-- PUB_NAME(출판사명) --NOT NULL(PUBLICHSER_NN)

-- PHONE(출판사전화번호) --제약조건 없음

--3개 정도의 샘플 데이터 추가하기

CREATE TABLE TB_PUBLISHER(
    PUB_NO NUMBER CONSTRAINT PUBLISHER_PK PRIMARY KEY,
    PUB_NAME VARCHAR2(20) CONSTRAINT PUBLICHSER_NN NOT NULL,
    PHONE VARCHAR2(14)
);

SELECT * FROM TB_PUBLISHER;

INSERT INTO TB_PUBLISHER VALUES (1, '한빛 출판사','02-1233-2223');
INSERT INTO TB_PUBLISHER VALUES (2,'좋은 출판사','010-2324-2355');
INSERT INTO TB_PUBLISHER VALUES (3,'손오공 출판사',NULL);

COMMENT ON COLUMN TB_PUBLISHER.PUB_NO IS '출판사번호';
COMMENT ON COLUMN TB_PUBLISHER.PUB_NAME IS '출판사명';
COMMENT ON COLUMN TB_PUBLISHER.PHONE IS '출판사전화번호';




--2. 도서들에 대한 데이터를 담기 위한 도서 테이블(TB_BOOK)

--컬럼: BK_NO(도서번호) --기본키(BOOK_PK)

-- BK_TITLE(도서명) --NOT NULL(BOOK_NN_TITLE)

-- BK_AUTHOR(저자명) --NOT NULL(BOOK_NN_AUTHOR)

-- BK_PRICE(가격)

-- BK_STOCK(재고) --기본값 1로 지정

-- BK_PUB_NO(출판사번호) --외래키(BOOK_FK)(TB_PUBLISHER 테이블을 참조하도록)

-- 이때 참조하고 있는 부모데이터 삭제 시 자식데이터도 삭제되도록 설정

--5개 정도의 샘플 데이터 추가하기

CREATE TABLE TB_BOOK(
    BK_NO VARCHAR2(20) CONSTRAINT BOOK_PK PRIMARY KEY,
    BK_TITLE VARCHAR2(50) CONSTRAINT BOOK_NN_TITLE NOT NULL,
    BK_AUTHOR VARCHAR2(30) CONSTRAINT BOOK_NN_AUTHOR NOT NULL,
    BK_PRICE NUMBER,
    BK_STOCK NUMBER DEFAULT 1,
    BK_PUB_NO CONSTRAINT BOOK_FK REFERENCES TB_PUBLISHER ON DELETE CASCADE
);

DROP TABLE TB_BOOK;

SELECT * FROM TB_BOOK;
COMMENT ON COLUMN TB_BOOK.BK_NO IS '도서번호';
COMMENT ON COLUMN TB_BOOK.BK_TITLE IS '도서명';
COMMENT ON COLUMN TB_BOOK.BK_AUTHOR IS '저자명';
COMMENT ON COLUMN TB_BOOK.BK_PRICE IS '가격';
COMMENT ON COLUMN TB_BOOK.BK_STOCK IS '재고';
COMMENT ON COLUMN TB_BOOK.BK_PUB_NO IS '출판사번호';

INSERT INTO TB_BOOK VALUES('A001','밥 챙겨 먹어요, 행복하세요','마포농수산쎈타',17820,10,1);
INSERT INTO TB_BOOK VALUES('A002','치유의 베이킹','정민',14850,DEFAULT,2);
INSERT INTO TB_BOOK VALUES('A003','DMA 천사의 별1', '박미연',12510,4,3);
INSERT INTO TB_BOOK VALUES('A004','만일 내가 인생을 다시 산다면', '김혜남',15480,3,1);
INSERT INTO TB_BOOK VALUES('A005','흔한남매12','미래엔아이세움',13050,20,3);



--3. 회원에 대한 데이터를 담기 위한 회원 테이블(TB_MEMBER)

--컬럼명: MEMBER_NO(회원번호) --기본키(MEMBER_PK)

-- MEMBER_ID(아이디) --중복금지(MEMBER_UQ)

--MEMBER_PWD(비밀번호) NOT NULL(MEMBER_NN_PWD)

--MEMBER_NAME(회원명) NOT NULL(MEMBER_NN_NAME)

--GENDER(성별) 'M' 또는 'F'로 입력되도록 제한(MEMBER_CK_GEN)

--ADDRESS(주소)

--PHONE(연락처)

--STATUS(탈퇴여부) --기본값으로 'N' 그리고 'Y' 혹은 'N'으로 입력되도록 제약조건(MEMBER_CK_STA)

--ENROLL_DATE(가입일) --기본값으로 SYSDATE, NOT NULL 조건(MEMBER_NN_EN)

--5개 정도의 샘플 데이터 추가하기

COMMENT ON COLUMN TB_MEMBER.MEMBER_NO IS '회원번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_ID IS '아이디';
COMMENT ON COLUMN TB_MEMBER.MEMBER_PWD IS '비밀번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_NAME IS '회원명';
COMMENT ON COLUMN TB_MEMBER.GENDER IS '성별';
COMMENT ON COLUMN TB_MEMBER.ADDRESS IS '주소';
COMMENT ON COLUMN TB_MEMBER.PHONE IS '연락처';
COMMENT ON COLUMN TB_MEMBER.STATUS IS '탈퇴여부';
COMMENT ON COLUMN TB_MEMBER.ENROLL_DATE IS '가입일';
CREATE TABLE TB_MEMBER(
    MEMBER_NO NUMBER CONSTRAINT MEMBER_PK PRIMARY KEY,
    MEMBER_ID VARCHAR2(30) CONSTRAINT MEMBER_UQ UNIQUE,
    MEMBER_PWD VARCHAR2(30) CONSTRAINT MEMBER_NN_PWD NOT NULL,
    MEMBER_NAME VARCHAR2(20) CONSTRAINT MEMBER_NN_NAME NOT NULL,
    GENDER CHAR(1) CONSTRAINT MEMBER_CK_GEN CHECK(GENDER IN('F','M')),
    ADDRESS VARCHAR2(100),
    PHONE VARCHAR2(15),
    STATUS CHAR(1) DEFAULT 'N' CONSTRAINT MEMBER_CK_STA CHECK(STATUS IN ('Y','N')), 
    ENROLL_DATE DATE  DEFAULT SYSDATE CONSTRAINT MEMBER_NN_EN NOT NULL
);

SELECT * FROM TB_MEMBER;

INSERT INTO TB_MEMBER 
VALUES(1,'QWE123','QWE123','박연준','M',NULL,NULL,'Y','18/10/13');

INSERT INTO TB_MEMBER
VALUES(2,'ASD123','ASDF123','아무개',NULL,'서울 어딘가','010-1111-2222',DEFAULT, '19/11/12');

INSERT INTO TB_MEMBER
VALUES(3,'ZCFEA','AFCVD','박재희','F','인천 어딘가','010-2323-3443','N',DEFAULT);

INSERT INTO TB_MEMBER
VALUES(4,'ADFCV','ASDFER','아몰랑',NULL,NULL,NULL,DEFAULT, '00/09/09');

INSERT INTO TB_MEMBER
VALUES(5,'ZCVADSF','WERC1','아이유','F','서울특별시 광진구',NULL,'N',SYSDATE);








--4. 도서를 대여한 회원에 대한 데이터를 담기 위한 대여목록 테이블(TB_RENT)

--컬럼:

--RENT_NO(대여번호) --기본키(RENT_PK)

--RENT_MEM_NO(대여회원번호) --외래키(RENT_FK_MEM) TB_MEMBER와 참조하도록

--이때 부모데이터 삭제 시 NULL값이 되도록 옵션 설정

--RENT_BOOK_NO(대여도서번호) --외래키(RENT_FK_BOOK) TB_BOOK와 참조하도록

--이때 부모데이터 삭제 시 NULL값이 되도록 옵션설정

--RENT_DATE(대여일) --기본값 SYSDATE

--샘플데이터 3개정도 추가하기
COMMENT ON COLUMN TB_RENT.RENT_NO IS '대여번호';
COMMENT ON COLUMN TB_RENT.RENT_MEM_NO IS '대여회원번호';
COMMENT ON COLUMN TB_RENT.RENT_BOOK_NO IS '대여도서번호';
COMMENT ON COLUMN TB_RENT.RENT_DATE IS '대여일';

CREATE TABLE TB_RENT(
    RENT_NO NUMBER CONSTRAINT RENT_PK PRIMARY KEY,
    RENT_MEM_NO NUMBER CONSTRAINT RENT_FK_MEM REFERENCES TB_MEMBER ON DELETE SET NULL,
    RENT_BOOK_NO VARCHAR2(20) CONSTRAINT RENT_FK_BOOK REFERENCES TB_BOOK ON DELETE SET NULL,
    RENT_DATE DATE DEFAULT SYSDATE
);

SELECT * FROM TB_RENT;
INSERT INTO TB_RENT VALUES(1, 1,'A001',DEFAULT);
INSERT INTO TB_RENT(RENT_NO,RENT_MEM_NO, RENT_BOOK_NO) VALUES(2,2,'A002');
INSERT INTO TB_RENT VALUES(3,4,'A004','22/12/4');
DELETE TB_RENT WHERE RENT_NO = 3;





--2번 도서를 대여한 회원의 이름, 아이디, 대여일, 반납예정일(대여일+7)을 조회하시오.

SELECT MEMBER_NAME, MEMBER_ID, RENT_DATE, RENT_DATE+7 AS "반납예정일"
FROM TB_MEMBER
JOIN TB_RENT ON(RENT_MEM_NO = MEMBER_NO)
WHERE RENT_BOOK_NO ='A002';



